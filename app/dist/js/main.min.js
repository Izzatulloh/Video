"use strict";var menu=document.querySelector(".header__menu-item"),nav=document.querySelector(".header__nav"),body=document.querySelector("body");menu.addEventListener("click",function(){menu.classList.toggle("active"),nav.classList.toggle("active"),console.log(menu),body.style.overflow=2==menu.classList.length?"hidden":"auto"});var video=document.querySelector("video"),play=document.querySelector(".fa-play"),stop=document.querySelector(".fa-stop"),playerIcon=document.querySelector(".video__player-icon"),forward=document.querySelector(".fa-forward"),backward=document.querySelector(".fa-backward"),volume=document.querySelector(".volume"),progress=document.querySelector(".progress"),volumeUpDown=document.querySelector(".fa-volume-up"),time=document.querySelector(".video__time"),fullScreen=document.querySelector(".fullScreen");playerIcon.addEventListener("click",function(){video__time(),player(),playerIcon.style.display="none"}),video.addEventListener("click",function(){player(),playerIcon.style.display="none"}),play.addEventListener("click",function(){player(),playerIcon.style.display="none"}),stop.addEventListener("click",function(){stopVideo()}),volume.addEventListener("input",function(){var a=volume.value;video.volume=a/100,save=volume.value}),video.addEventListener("timeupdate",function(){progressUpadate(),playerIcon.style.display="none"}),backward.addEventListener("click",function(){speedDownVideo(),playerIcon.style.display="none"}),forward.addEventListener("click",function(){speedUpVideo()}),progress.addEventListener("click",function(){videoRewind()}),volumeUpDown.addEventListener("click",function(){volumeUp()}),fullScreen.addEventListener("click",function(){video.requestFullscreen()});var speed=1;function progressUpadate(){var a=video.duration,b=video.currentTime;progress.value=100*b/a}function player(){play.classList.contains("fa-play")?(play.classList.add("fa-pause"),play.classList.remove("fa-play"),playVideo()):(play.classList.add("fa-play"),play.classList.remove("fa-pause"),pauseVideo())}var save=volume.value,saveVol=video.volume;function volumeUp(){var a=volume.value;video.volume=a/100,volumeUpDown.classList.contains("fa-volume-up")?(volumeUpDown.classList.add("fa-volume-mute"),volumeUpDown.classList.remove("fa-volume-up"),video.volume=0,volume.value=0):(volumeUpDown.classList.add("fa-volume-up"),volumeUpDown.classList.remove("fa-volume-mute"),video.volume=saveVol,volume.value=save)}function playVideo(){video.play()}function pauseVideo(){video.pause()}function stopVideo(){video.pause(),video.currentTime=0,play.classList.add("fa-play"),play.classList.remove("fa-pause"),playerIcon.style.display="flex"}function speedDownVideo(){video.play(),video.playbackRate=speed,speed-=.5,.5>=speed&&(speed=.5),play.classList.remove("fa-play"),play.classList.add("fa-pause")}function speedUpVideo(){video.play(),video.playbackRate=speed,speed+=.5,3<=speed&&(speed=3),play.classList.remove("fa-play"),play.classList.add("fa-pause")}function videoRewind(){var a=progress.offsetWidth,b=event.offsetX;progress.value=100*b/a,video.currentTime=video.duration*(b/a),console.log(a)}video.addEventListener("loadedmetadata",function(){video__time()}),video.addEventListener("timeupdate",function(){video__time()});function fixed(a){return 10>a?"0".concat(a):"".concat(a)}function video__time(){var a=+video.duration.toFixed(),b=+video.currentTime.toFixed(),c="".concat(fixed(Math.floor(b/60)),":").concat(fixed(Math.floor(b%60))),d="".concat(Math.floor(a/60),":").concat(Math.floor(a%60));time.innerHTML="".concat(c," / ").concat(d)}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
